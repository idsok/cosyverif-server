#! /usr/bin/env lua

require "pl.stringx" . import ()
local colors = require 'ansicolors'
local runner   = require "luacov.runner"
local reporter = require "luacov.reporter"
local configuration = runner.load_config ()
reporter.report()

local report = {}

local file  = "luacov.report.out"
local lines = {}
local output = nil
for line in io.lines(file) do
  if line:find ("==============================================================================") ~= 1 then
    if line:find ("Summary") == 1 then
      if type (output) == "userdata" then
        io.close (output)
      end
      output = "summary"
    elseif line:find ("./cosy/", 1, true) == 1 then
      if type (output) == "userdata" then
        io.close (output)
      end
      local s, e = line:find (".*/")
      local name = "../coverage/" .. line:sub (e + 1)
      output = io.open(name, "w")
    elseif output == "summary" then
      if line:find ("./cosy/", 1, true) then
        line = line:expandtabs (1)
        local parts = line:split (" ")
        if #parts == 4 and parts [4] ~= "" then
          local filename = parts [4]
          local percent  = parts [3]
          report [filename] = percent
        end
      end
    elseif type (output) == "userdata" then
      output:write (line .. "\n")
    end
  end
end
if type (output) == "userdata" then
  io.close (output)
end

local max_size = 0
for k, _ in pairs (report) do
  if #k > max_size then
    max_size = #k
  end
end

max_size = max_size + 3

local keys = {}
for k, _ in pairs (report) do
  keys [#keys + 1] = k
end
table.sort (keys)

for _, k in ipairs (keys) do
  local v = report [k]
  if v == "100.00%" then
    status = colors("%{bright green}Full")
  else
    status = colors("%{bright red}" .. v)
  end
  local line = k
  for i = #k, max_size do
    line = line .. " "
  end
  line = line .. status
  print ("Coverage " .. line)
end
